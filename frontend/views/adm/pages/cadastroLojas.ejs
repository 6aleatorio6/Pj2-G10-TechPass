<div id="alert">
  <script>
    alert("novaLoja")
  </script>
</div>

<h4 class="fw-bold py-3 mb-4">
  <span class="text-muted fw-light">Cadastro/</span> Lojas
</h4>


<!-- meu  -->

<!-- modal -->
<div class="mt-3">


  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createloja">
    Adicionar Nova Loja
  </button>

  <!-- modal para criar um ponto de onibus -->
  <div class="modal fade" id="createloja" tabindex="-1" aria-labelledby="createlojaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="createlojaLabel">
            adicionando nova loja
          </h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <form novalidate id="formularioDeCadastroLojas">
          <div class="modal-body">
            <div class="row g-2">
              <div class="col-8">
                <label for="nome" class="form-label">Nome da Loja</label>
                <input type="text" class="form-control" id="nome" name="nome" required placeholder="TechPass Centro " />
              </div>

              <div class="col-md-4 col-4">
                <label for="cep" class="form-label">CEP</label>
                <input type="text" class="form-control" id="cep" name="cep" required placeholder="11832556 " />
              </div>

              <div class="col-md-10 col-9">
                <label for="street" class="form-label">rua</label>
                <input type="text" class="form-control" id="street" name="street" required placeholder="Rua das Flores " disabled/>
              </div>
              <div class="col-md-2 col-3">
                <label for="state" class="form-label">Estado</label>
                <input type="text" class="form-control" id="state" name="state" required placeholder="SP" disabled/>
              </div>
              <div class="col-md-8 col-12">
                <label for="city" class="form-label">cidade</label>
                <input type="text" class="form-control" id="city" name="city" required placeholder="Caraguatatuba"disabled />
              </div>
              <div class="col-md-4 col-12">
                <label for="neighborhood" class="form-label">bairro</label>
                <input type="text" class="form-control" id="neighborhood" name="neighborhood" required placeholder="Olaria"disabled />
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancelar
            </button>
            <button type="submit" class="btn btn-primary">Criar loja</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- fim meu  -->

<!-- / Content -->


<!-- Content -->


<h4 class="fw-bold py-3 mb-4">
  <span class="text-muted fw-light">Lojas atuais </span>
</h4>

<!-- Basic Bootstrap Table -->
<div class="card">
  <div class="table-responsive text-nowrap">
    <table id="example" class="table table-striped" style="width: 100%">
      <thead>
        <tr>
          <th>Nome</th>
          <th>CEP</th>
          <th>Endereco</th>
          <th>Config</th>
        </tr>
      </thead>
      <tbody>
        <% allLojas.forEach(elem=> { %>
        <tr>
          <td><%- elem.nome %></td>
          <td><%- elem.cep %></td>
          <td><%- elem.endereco %></td>

          <td>

            <button type="button" class="btn btn-info py-1 px-2" onclick='modalInfo(<%-JSON.stringify(elem)%>)'>
              <i class="bi bi-info-lg"></i>
            </button>
            <button type="button" class="btn btn-warning py-1 px-2" onclick='modalEdit(<%-JSON.stringify(elem)%>)'>
              <i class="bi bi-pencil-square"></i>
            </button>

            <button class="btn btn-danger py-1 px-2" data-bs-target="#loja<%= elem.id%>" data-bs-toggle="modal" data-bs-dismiss="modal" _msttexthash="350038" _msthash="310" _mstvisible="4"><i class="bi bi-trash-fill"></i></button>





            <div class="modal fade" id="loja<%= elem.id%>" aria-labelledby="modalToggleLabel2" tabindex="-1" _mstvisible="0" style="display: none;" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered" _mstvisible="1">
                <div class="modal-content" _mstvisible="2">
                  <div class="modal-header " _mstvisible="3">
                    <h5 class="modal-title text-warning" id="modalToggleLabel2" _msttexthash="66105" _msthash="311" _mstvisible="4"> Alerta!!!
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar" _mstaria-label="59709" _msthash="312" _mstvisible="4"></button>
                  </div>
                  <div class="modal-body" _msttexthash="1998048" _msthash="313" _mstvisible="3">
                    <span> Tem
                      certeza que desja excluir esta Loja?</span>
                  </div>
                  <div class="modal-footer" _mstvisible="3">
                    <button class="btn btn-warning" data-bs-dismiss="modal" _msttexthash="324714" _msthash="314" _mstvisible="4">Não, voltar as
                      alterações</button>
                    <button type="click" class="btn btn-danger" id="deleteLojaId<%=elem.id%>">Sim, Deletar</button>
                    <script>
                      const modaldeleteID<%=elem.id%> = document.querySelector("#loja<%=elem.id%>")

                      modaldeleteID<%=elem.id%>.querySelector("#deleteLojaId<%=elem.id%>").addEventListener("click", async () => {

                        try {
                          const deletado = await axios.delete("http://localhost:9000/api/adm/deleteLojas<%=elem.id%>")

                          localStorage.setItem("deleLoja", JSON.stringify({
                            cor: "danger",
                            texto: deletado.data.message,
                            div: "#alert",
                          }))

                          location.reload()
                        } catch (error) {
                          console.error(error)
                        }


                      })
                    </script>
                  </div>
                </div>
              </div>
            </div>
          </td>

        </tr>
        <% }) %>


      </tbody>
    </table>
  </div>
</div>



<script>
  document.addEventListener("DOMContentLoaded", () => {
        const formsloja = new Inputs("#formularioDeCadastroLojas");

        let informacoesdaAPI;

        formsloja.allvalidacao({
          cep: {
            min: 9,
        max: 9,
        caractereNpermitido: ["Nletra", "Nacentuacao"],
        autopontuar: [/([\d]{6})([\d]{2})/, "$1-$2"],
        pattern: ["(\\d{6}-\\d{2})", "cep valido", "cep invalido"],
        customEvento: [
              (value) => {
                if (value.match(/\d{9}/)) {
                  return "cep com 9 numero?";
                }
              },
              async (value) => {
                try {
                  informacoesdaAPI = (
                    await axios.get(
                      `https://brasilapi.com.br/api/cep/v2/${value}`
                    )
                  ).data;

                  formsloja.inputs((input) => {
                    for (const info in informacoesdaAPI) {
                      if (Object.hasOwnProperty.call(informacoesdaAPI, info)) {
                        if (input.name == info) {
                          input.value = informacoesdaAPI[info];
                          input.focus();
                          input.blur();
                        }
                      }
                    }
                  });
                } catch (error) {
                  console.log(error);
                  if (error.response.status == 404)
                    return "insira um CEP que exista";
                }
              },
            ],
            btnoff: "required", //signiifica que é obrigatorio
          },

            nome: {
              min: 3,
              max: 45,
              caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
              pattern: ["[a-zA-ZÀ-ú\s]{3,45}", "nome valido", "nome invalido"],
              btnoff: "naoEobrigatorio",
            },

         
    


        });

        formsloja.cadastrar("http://localhost:9000/api/adm/lojas", () => {
            const values = formsloja.allValues()
            values.lat = informacoesdaAPI.location.coordinates.latitude
            values.lng = informacoesdaAPI.location.coordinates.longitude

            return values
          }, null, success = (response) => {
            localStorage.setItem("novaLoja", JSON.stringify({
              cor: "success",
              texto: response.data.message,
              div: "#alert",
            }))
            location.reload()
          })
      })

        function modalInfo(objEjs) {

          // transformando o objeto que está transformado em string para objeto dnv

          // criando uma div no js
          const umadiv = document.createElement("div")

          // adicionando o innerHTML com um template
          // https://www.w3schools.com/js/js_string_templates.asp
          // e
          // adicionando uma div de modal pego do site do boostrap
          umadiv.innerHTML = `
      <div class="modal fade" tabindex="-1" >
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Detalhes do Ponto</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body list-group h-100 w-100">
              <li class="list-group-item">Nome:<span class="ms-1"> ${objEjs.nome}</span></li>
              <li class="list-group-item">CEP:<span class="ms-1"> ${objEjs.cep}</span></li>
              <li class="list-group-item">Rua: <span class="ms-1"> ${objEjs.endereco.split(",")[0]}</span> </li>
              <li class="list-group-item">Bairro: <span class="ms-1"> ${objEjs.endereco.split(",")[1]}</span></li>
              <li class="list-group-item">Cidade: <span class="ms-1">${objEjs.endereco.split(",")[2]}</span> </li>
              <li class="list-group-item">Estado:  <span class="ms-1">${objEjs.endereco.split(",")[3]}</span></li>
            </div >
            <div class="modal-footer justify-content-between">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>

              <div>
              <button type="button" class="btn btn-warning" onclick='modalEdit(${JSON.stringify(objEjs)})' data-bs-dismiss="modal">Editar</button>
              <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Deletar</button>
              </div>
            </div>
          </div >
        </div >
      </div >
      `


          // o split divide uma string em substrings
          // https://www.w3schools.com/jsref/jsref_split.asp


          // criando uma variavel que recebe o modal dentro do umadiv
          const modal = umadiv.querySelector(".modal")

          // adicionando o modal ao BODY do HTML
          document.body.appendChild(modal)


          // criando uma instancia seguindo as instruções do boostrap
          // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
          const InstanciaBoostrapDoModal = new bootstrap.Modal(modal)

          // abrindo o modal
          InstanciaBoostrapDoModal.toggle()



          // vai para a parte de eventos que encontrara mais informações
          // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
          modal.addEventListener("hidden.bs.modal", () => {

            // quando o modal for fechado esse evento acionara e excluira o modal do body
            document.body.removeChild(modal)
          })
          // fim da função
        }




        function modalEdit(objEjs) {

const div = document.createElement("div")


div.innerHTML = `
      
    <div class="modal fade" id="modalToggle" aria-labelledby="modalToggleLabel" tabindex="-1" style="display: none" _mstvisible="0" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" _mstvisible="1">
        <div class="modal-content" _mstvisible="2">
          <form id="resetForm">
            <div class="modal-header" _mstvisible="3">
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar" _mstaria-label="59709" _msthash="308" _mstvisible="4"></button>
            </div>
            <div class="modal-body" _msttexthash="1992003" _msthash="309" _mstvisible="3">
              <div class="row" _mstvisible="4">
                <div class="card-body form-group">
                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="name">Nome</label>
                    <div class="col-sm-10">
                      <input type="text" class="form-control" name="nome" id="nome" value="${objEjs.nome}" required>

                    </div>
                  </div>
                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="cepInput">CEP</label>
                    <div class="col-sm-10">
                      <input type="text" class="form-control" name="cepInput" id="cepInput" placeholder="Enter CPF" value="${objEjs.cep}" required>

                    </div>
                  </div>

                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="street">Rua</label>
                    <div class="col-sm-10">
                      <input type="text" name="street" id="street" class="form-control phone-mask" value="${objEjs.endereco.split(",")[0].trim()}" />
                    </div>
                  </div>

                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="neighborhood">Bairro</label>
                    <div class="col-sm-10">
                      <input type="text" id="neighborhood" name="neighborhood" class="form-control phone-mask" value="${objEjs.endereco.split(",")[1].trim()}" />
                    </div>
                  </div>

                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="city">Cidade</label>
                    <div class="col-sm-10">
                      <input type="text" id="city" class="form-control phone-mask" name="city" value="${objEjs.endereco.split(",")[2].trim()}" />
                    </div>
                  </div>

                  <div class="row mb-4">
                    <label class="col-sm-2 col-form-label" for="state">Estado</label>
                    <div class="col-sm-10">
                      <input type="text" id="state" class="form-control phone-mask" name="state" value="${objEjs.endereco.split(",")[3].trim()}" />
                    </div>
                  </div>

                </div>
              </div>
            </div>
            <div class="modal-footer" _mstvisible="3">
              <button type="button" class="btn btn-warning" id="resetar" onclick="document.getElementById('resetForm').reset()">
                Resetar
              </button>

              <button type="submit" class="btn btn-success">
                Salvar alterações
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

      `

const modal = div.querySelector(".modal")

//selecionando o modoal  e adicionando o modal ao BODY do HTML
document.body.appendChild(modal)

const InstanciaBoostrapDoModal = new bootstrap.Modal(modal)

InstanciaBoostrapDoModal.toggle()

formsValidacaoEdit = new Inputs("#resetForm") // pega todos os inputs do form 
const btnSalvarAlteracoes = document.querySelector("#btnSalvarAlteracoes")




formsValidacaoEdit.allvalidacao({

  nome: {
              min: 3,
              max: 45,
              caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
              pattern: ["[a-zA-ZÀ-ú\s]{3,45}", "nome valido", "nome invalido"],
              btnoff: "naoEobrigatorio",
            },

  cepInput: {
    min: 9,
    max: 9,
    caractereNpermitido: ["Nletra", "Nacentuacao", ],
    autopontuar: [/([\d]{6})([\d]{2})/, "$1-$2"],
    pattern: ["(\\d{6}-\\d{2})", "cep valido", "cep invalido"],
    customEvento: [

      (async (value) => {
        try {
          informacoesdaAPI = (await axios.get(`https://brasilapi.com.br/api/cep/v2/${value}`)).data


          formsValidacaoEdit.inputs((input) => {
            for (const info in informacoesdaAPI) {
              if (Object.hasOwnProperty.call(informacoesdaAPI, info)) {
                if (input.name == info) {
                  input.value = informacoesdaAPI[info]
                  input.focus()
                  input.blur()

                }
              }
            }
          })

        } catch (error) {
          console.log(error)
          if (error.response.status == 404) return "insira um CEP que exista"

        }
      })
    ],
    btnoff: "apaiossk",

  },

  street: {
    min: 3,
    max: 255,
    btnoff: "apaiossk",
    caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
    pattern: [".*", "Rua valido", "Rua invalida"]
  },


  neighborhood: {
    min: 3,
    max: 255,
    btnoff: "apaiossk",
    caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
    pattern: [".*", "Bairro valido", "Bairro invalido"]
  },

  city: {
    min: 3,
    max: 255,
    btnoff: "apaiossk",
    caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
    pattern: [".*", "Cidade valida", "Cidade invalida"],
    // customEvento: [
    //   (value) => {

    //     if (objEjs.endereco.split(",")[2] !== value) {
    //       console.log("paia deu certo", objEjs)

    //     } else {
    //       console.log("paiaDeu Errado")

    //       return "deu erro"
    //     }
    //   }

    // ]
  },

  state: {
    min: 2,
    max: 2,
    btnoff: "apaiossk",
    caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
    pattern: [".*", "Estado valido", "Estado invalido"]
  },


});




formsValidacaoEdit.forms.addEventListener("submit", async (event) => {

  event.preventDefault()

  try {

    const valorEdit = formsValidacaoEdit.allValues()
    valorEdit.id = objEjs.id


    const {
      data
    } = await axios.get(`https://brasilapi.com.br/api/cep/v2/${valorEdit.cepInput}`)




    valorEdit.lat = data.location.coordinates.latitude
    valorEdit.lng = data.location.coordinates.longitude

    console.log(valorEdit);

    const response = await axios.put(`http://localhost:9000/api/adm/lojas`, valorEdit)
 

    
    // // localStorage.setItem("stopBusEdit", JSON.stringify({
    // //   cor: "success",
    // //   texto: `O ponto do cep ${objEjs.cep} foi alterado para o cep ${valorEdit.cepInput} com sucesso`,
    // //   div: "#alert",
    // // }))

    // location.reload()



  } catch (error) {
    console.log(error);
  }


})



// formsponto.cadastrar("http://localhost:9000/api/linhas/bus-stop", () => {
//   const values = formsponto.allValues()

//   values.lat = informacoesdaAPI.location.coordinates.latitude
//   values.lng = informacoesdaAPI.location.coordinates.longitude

//   return values
// }, null, success = (response) => {
//   localStorage.setItem("stopBusCreate", JSON.stringify({
//     cor: "success",
//     texto: response.data.message,
//     div: "#alert",
//   }))

//   location.reload()


// })


// const btn = document.querySelector("#resetar")
// const btnSalvarAlteracoes = document.querySelector("#btnSalvarAlteracoes")


// btnSalvarAlteracoes.addEventListener("click", async (evnt) => {
//   // const url = window.location.href; //retorna a url da pagina
//   // const urlId = url.split("/").pop();
//   // console.log(urlId); //pega  o ultimo parametro da url

//   const cepEdit = cepInput.value
//   const rua = document.querySelector("#ruaInput").value
//   const bairro = document.querySelector("#bairroInput").value
//   const cidade = document.querySelector("#cidadeInput").value
//   const estado = document.querySelector("#estadoInput").value



//   const data = {
//     cepEdit,
//     rua,
//     bairro,
//     cidade,
//     estado
//   }

//   console.log(data);

// })

// function validarCEP(cep) {

//   return /^\d{8}$/.test(cep);
// }




// var cepInput = document.querySelector('#cepInput');
// cepInput.addEventListener("blur", async (event) => {
//   if (cepInput.value !== objEjs.cep) btnSalvarAlteracoes.disabled = false;
//   else btnSalvarAlteracoes.disabled = true; //nao muda nada so uma forma diferente de fazer

//   // if (cepInput.value !== objEjs.cep) {
//   //   if (!validarCEP(cepInput.value)) {
//   //     // // Exibir mensagem de erro e impedir o envio do formulário
//   //     document.querySelector('#cepInput').classList.add('is-invalid');
//   //     btnSalvarAlteracoes.addAttribute('disabled');
//   //   } else {
//   //     btnSalvarAlteracoes.removeAttribute('disabled');
//   //     document.getElementById('cepInput').classList.remove('is-invalid');
//   //     document.getElementById('cepInput').classList.add('is-valid');

//   //   }
//   // } else {
//   //   btnSalvarAlteracoes.addAttribute('disabled');
//   //   document.getElementById('cepInput').classList.remove('is-invalid');
//   //   document.getElementById('cepInput').classList.remove('is-valid');
//   // }

// });



modal.addEventListener("hidden.bs.modal", () => {

  // quando o modal for fechado esse evento acionara e excluira o modal do body
  document.body.removeChild(modal)
})



}
// fim modalEdit

</script>