<h4 class="fw-bold py-3 mb-2">
  <span class="text-muted fw-light">Linhas/</span>
</h4>

<div id="alert">
  <script>
    alert("linhasCreate");
    alert("linhasDelete");
    alert("linhasEdit");
  </script>
</div>

<%-include('../partials/modals/create/_formsCriarLinha') %>

<section class="mt-5">
  <h4 class="">Todos os pontos de onibus</h4>

  <div class="card">
    <div class="table-responsive text-nowrap">
      <table id="PontosDeOnibus" class="table table-striped" data-ColNoOrden="3" style="width: 100%">
        <thead>
          <tr>
            <th>Numero da Linha</th>
            <th>bairro 1</th>
            <th>bairro 2</th>
            <th>Opções</th>
          </tr>
        </thead>
        <tbody>
          <% linhas.forEach((elem)=> { %>

          <tr class="">
            <td><%= elem.numero_linha %></td>
            <td><%= elem.bairroOrigem %></td>
            <td><%= elem.bairroDestino %></td>

            <td>
              <button type="button" class="btn btn-info py-1 px-2" onclick=' modalInfo(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-info-lg"></i>
              </button>

              <button class="btn btn-warning py-1 px-2" onclick='modalEdit(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-pencil-square"></i>
              </button>

              <button class="btn btn-danger py-1 px-2" onclick='modalDelet(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-trash-fill"></i>
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</section>

<script>
  const modalInfo = criarFuncaoModal((objEJS) => {
    return ` <%- include("../partials/modals/info/_linhasHorario.ejs") %> `;
  });

  const modalDelet = criarFuncaoModal(
    (objEJS) => {
      return `<%- include("../partials/modals/delete/_linhas.ejs") %>`;
    },
    async (modal, objEJS) => {
      const btnDelet = modal.querySelector(".delete");

      btnDelet.addEventListener("click", async () => {
        try {
          const deletado = await axios.delete(
            `http://localhost:9000/api/linhas/deletar/${objEJS.id}`, getCookie()
          );

          localStorage.setItem(
            "linhasDelete",
            JSON.stringify({
              cor: "danger",
              texto: `A linha ${objEJS.numero_linha} foi apagada!`,
              div: "#alert",
            })
          );

          location.reload();
        } catch (error) {
          console.error(error);
        }
      });
    }
  );

  //
  const modalInfo2 = criarFuncaoModal(
    (objEJS) => {
      return ` <%- include("../partials/modals/info/_linhasItinerario.ejs") %>`;
    },

    (modal, objEJS) => {
      modal.querySelectorAll("ul").forEach((e, i) => {
        for (const elem of objEJS.percurso[i]) {
          const li = document.createElement("li");
          li.classList.add("list-group-item", "fs-5", "border-dark-subtle");

          const endereco = elem.ponto_de_onibus.endereco.split(",");
          li.innerText = `${endereco[0]}, ${endereco[1]}, ${endereco[2]} `;

          e.appendChild(li);
        }
      });
    }
  );

  const modalEdit = criarFuncaoModal(
    (objEJS) => {
      return `<%- include("../partials/modals/edit/_linhas-inicio.ejs") %>`;
    },
    (modal, data) => {
      const instanciaValid = new Inputs(modal);

      instanciaValid.allvalidacao(linhasInicioEdit);

      modal.addEventListener("shown.bs.modal", function validarAntigos() {
        instanciaValid.inputs((input) => {
          input.focus();
          input.blur();
        });

        modal.removeEventListener("shown.bs.modal", validarAntigos);
      });

      instanciaValid.forms.addEventListener("submit", async (e) => {
        e.preventDefault();

        const infos = instanciaValid.allValues();

        infos.numero_linha = parseInt(infos.numero_linha);

        try {
          const response = await axios.patch(
            `http://localhost:9000/api/linhas/atualizar/${data.id}`,
            infos, getCookie()
          );

          localStorage.setItem(
            "linhasEdit",
            JSON.stringify({
              cor: "warning",
              texto: `A linha ${data.numero_linha} foi Editado!`,
              div: "#alert",
            })
          );

          location.reload();
        } catch (erro) {
          console.error(erro);
        }
      });
    }
  );

  const modalEditItinerario = criarFuncaoModal(
    (objEJS) => {
      return `<%- include("../partials/modals/edit/_linhasITI.ejs") %>`;
    },
    (modal, data) => {}
  );

  const modalEditHorario = criarFuncaoModal(
    (objEJS) => {
      return `<%- include("../partials/modals/edit/_linhasHorario.ejs") %>`;
    },
    (modal, alldata) => {
      const instanciaValid = new Inputs(modal);

      let allvalores = {
        rota1: {
          id: alldata.id[0],
          horario: [],
        },
        rota2: {
          id: alldata.id[1],
          horario: [],
        },
      };

      function guardarObjNoForm(obj, n) {
        allvalores[`rota${n}`].horario = obj;
      }

      const lista1EditHora = modal.querySelector("#lista1-horarios");
      const lista2EditHora = modal.querySelector("#lista2-horarios");

      // para carregar os horarios já salvos

      alldata.horario_diario_saida[0].forEach((elem, indice) => {
        const {
          id,
          horario_de_saida,
          duracaoEstimada
        } = elem;

        addLiHorario(
          new Date(horario_de_saida)
          .toLocaleTimeString()
          .match(/([\d]{2}:[\d]{2})/g),
          duracaoEstimada,
          indice,
          lista1EditHora.querySelector("ul"),
          guardarObjNoForm,
          allvalores.rota1.horario,
          1
        );

        allvalores.rota1.horario.push({
          id,
          horario_de_saida,
          duracaoEstimada,
        });
      });

      alldata.horario_diario_saida[1].forEach((elem, indice) => {
        const {
          id,
          horario_de_saida,
          duracaoEstimada
        } = elem;


        addLiHorario(
          new Date(horario_de_saida)
          .toLocaleTimeString()
          .match(/([\d]{2}:[\d]{2})/g),
          duracaoEstimada,
          indice,
          lista2EditHora.querySelector("ul"),
          guardarObjNoForm,
          allvalores.rota2.horario,
          2
        );

        allvalores.rota2.horario.push({
          id,
          horario_de_saida,
          duracaoEstimada,
        });
      });

      // addpercurso(1, "#percurso1Form", guardarObjNoForm);
      addhorario(lista1EditHora, 1, guardarObjNoForm);
      addhorario(lista2EditHora, 2, guardarObjNoForm);

      instanciaValid.allvalidacao(linhasHorariosEditVALID);

      instanciaValid.forms.addEventListener("submit", async (e) => {
        e.preventDefault();


        console.log(allvalores);

        allvalores



        try {
          console.log(allvalores.rota1.horario);
          const response = await axios.patch(
            `http://localhost:9000/api/linhas/atualizar/horarios/${allvalores.rota1.id}`, {
              horario_diario_saida: allvalores.rota1.horario
            }, getCookie())

          localStorage.setItem(
            "linhasEdit",
            JSON.stringify({
              cor: "warning",
              texto: `A linha ${data.numero_linha} foi Editado!`,
              div: "#alert",
            })
          );

          location.reload();
        } catch (erro) {
          console.error(erro);
        }
      });
    }
  );
</script>