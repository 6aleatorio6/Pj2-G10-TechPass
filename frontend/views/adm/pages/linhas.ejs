<h4 class="fw-bold py-3 mb-2">
  <span class="text-muted fw-light">Linhas/</span>
</h4>

<div id="alert">
  <script>
    alert("linhasCreate");
    alert("linhasDelete");
    alert("linhasEdit");
  </script>
</div>

<%-include('../partials/modals/create/_formsCriarLinha') %>





<section class="mt-5">
  <h4 class="">Todos os pontos de onibus</h4>

  <div class="card">
    <div class="table-responsive text-nowrap">
      <table id="PontosDeOnibus" class="table  table-striped" data-ColNoOrden="3" style="width: 100%">
        <thead>
          <tr>
            <th>Numero da Linha</th>
            <th>bairro 1</th>
            <th>bairro 2</th>
            <th>Opções</th>
          </tr>
        </thead>
        <tbody>
          <% linhas.forEach((elem)=> { %>

          <tr class="">
            <td> <%= elem.numero_linha %></td>
            <td><%= elem.bairroOrigem %> </td>
            <td><%= elem.bairroDestino  %> </td>

            <td>
              <button type="button" class="btn btn-info py-1 px-2" onclick=' modalInfo(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-info-lg"></i>
              </button>


              <button class="btn btn-warning py-1 px-2" onclick='modalEdit(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-pencil-square"></i>
              </button>

              <button class="btn btn-danger py-1 px-2" onclick='modalDelet(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-trash-fill"></i>
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</section>


<script>
  const modalInfo = criarFuncaoModal((objEJS) => {
    return ` <%- include("../partials/modals/info/_linhasHorario.ejs") %> `
  })




  const modalDelet = criarFuncaoModal((objEJS) => {
    return `<%- include("../partials/modals/delete/_linhas.ejs") %>`
  }, async (modal, objEJS) => {
    const btnDelet = modal.querySelector(".delete");

    btnDelet.addEventListener("click", async () => {
      try {
        const deletado = await axios.delete(
          `http://localhost:9000/api/linhas/deletar/${objEJS.id}`
        );

        localStorage.setItem(
          "linhasDelete",
          JSON.stringify({
            cor: "danger",
            texto: `A linha ${objEJS.numero_linha} foi apagada!`,
            div: "#alert",
          })
        );

        location.reload();
      } catch (error) {
        console.error(error);
      }
    });
  })




  // 
  const modalInfo2 = criarFuncaoModal((objEJS) => {
      return ` <%- include("../partials/modals/info/_linhasItinerario.ejs") %>`;
    },

    (modal, objEJS) => {
      modal.querySelectorAll("ul").forEach((e, i) => {
        for (const elem of objEJS.percurso[i]) {
          const li = document.createElement("li")
          li.classList.add("list-group-item", "fs-5", "border-dark-subtle")


          const endereco = elem.ponto_de_onibus.endereco.split(",")
          li.innerText = `${endereco[0]}, ${endereco[1]}, ${endereco[2] } `

          e.appendChild(li)
        }
      })
    }
  );



  const modalEdit = criarFuncaoModal((objEJS) => {
    return `<%- include("../partials/modals/edit/_linhas-inicio.ejs") %>`

  }, (modal, data) => {
    const instanciaValid = new Inputs(modal)


    instanciaValid.allvalidacao({
      numero_linha: {
        min: 1,
        max: 4,
        caractereNpermitido: [
          "Nletra",
          "NcaractereEspecial",
          "Nacentuacao",
        ],
        pattern: ["^(\\d{1,4})$", "numero valido", "numero invalido"],
        btnoff: "required",
      },
      bairroDestino: {
        min: 3,
        max: 20,
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [
          "(^[a-zA-ZÀ-ÿ0-9\\s'\\-]{3,20}$)",
          "bairro valido",
          "bairro invalido",
        ],
        btnoff: "required",
      },
      bairroOrigem: {
        min: 3,
        max: 20,
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [
          "(^[a-zA-ZÀ-ÿ0-9\\s'\\-]{3,20}$)",
          "bairro valido",
          "bairro invalido",
        ],
        btnoff: "required",
      },
    });


    instanciaValid.inputs((input) => {
      input.focus()
      input.blur()
    })

    instanciaValid.forms.addEventListener("submit", async (e) => {
      e.preventDefault()

      const infos = instanciaValid.allValues()

      infos.numero_linha = parseInt(infos.numero_linha)

      try {
        const response = await axios.patch(`http://localhost:9000/api/linhas/atualizar/${data.id}`, infos)



        localStorage.setItem(
          "linhasEdit",
          JSON.stringify({
            cor: "warning",
            texto: `A linha ${data.numero_linha} foi Editado!`,
            div: "#alert",
          })
        );

        location.reload();
      } catch (erro) {
        console.error(erro);
      }
    })
  })


  const modalEditItinerario = criarFuncaoModal((objEJS) => {
    return `<%- include("../partials/modals/edit/_linhasITI.ejs") %>`
  })
</script>