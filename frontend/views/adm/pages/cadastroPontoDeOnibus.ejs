<h4 class="fw-bold py-3 mb-2">
  <span class="text-muted fw-light">Linhas/</span> Pontos atuais
</h4>

<div id="alert"></div>
<script>
  alert("stopBusCreate");
  alert("stopBusEdit");
  alert("stopBusDelete");
</script>

<%-include('../partials/_formsPontoDeOnibus') %>


<section class="mt-5">
  <h4 class="">Todos os pontos de onibus</h4>

  <div class="card">
    <div class="table-responsive text-nowrap">
      <table id="PontosDeOnibus" class="table table-striped" style="width: 100%">
        <thead>
          <tr>
            <th>CEP</th>
            <th>Rua</th>
            <th>turno</th>
            <th>Opções</th>

          </tr>
        </thead>
        <tbody>
          <% pontos.forEach((elem)=> { %>

          <tr>
            <td>
              <%= elem.cep %>
            </td>
            <td>
              <%= elem.endereco.split(",")[0] %>
            </td>
            <td>
              <%= elem.endereco.split(",")[1] %>
            </td>
            <td>
              <button type="button" class="btn btn-info py-1 px-2" onclick='modalInfo(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-info-lg"></i>
              </button>

              <button class="btn btn-warning py-1 px-2" onclick='modalEdit(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-pencil-square"></i>
              </button>

              <button class="btn btn-danger py-1 px-2" data-bs-target="#pontodeonibus<%= elem.id%>" onclick='modalDelet(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-trash-fill"></i>
              </button>

            </td>


          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</section>


<!-- chamando o js do boostrap antes de criar a instancia -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script>
  console.log(pontos);

  function modalDelet(objEjs){
  
    const divdelete = document.createElement("div")

    divdelete.innerHTML = `
          
              <div class="modal fade" id="pontodeonibus${objEjs.id}" aria-labelledby="modalToggleLabel2" tabindex="-1" _mstvisible="0" style="display: none" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" _mstvisible="1">
                  <div class="modal-content" _mstvisible="2">
                    <div class="modal-header" _mstvisible="3">
                      <h5 class="modal-title text-warning" id="modalToggleLabel2" _msttexthash="66105" _msthash="311" _mstvisible="4">
                        Alerta!!!
                      </h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar" _mstaria-label="59709" _msthash="312" _mstvisible="4"></button>
                    </div>
                    <div class="modal-body" _msttexthash="1998048" _msthash="313" _mstvisible="3">
                      <span>
                        Tem certeza que desja excluir o ponto  com o CEP ${objEjs.cep} ?</span>
                    </div>
                    <div class="modal-footer" _mstvisible="3">
                      <button class="btn btn-secondary" data-bs-dismiss="modal" _msttexthash="324714" _msthash="314" _mstvisible="4">
                        Cancelar
                      </button>
                      <button type="click" class="btn btn-danger" id="deletePontoId">
                        Sim, Deletar
                      </button>
  
            `

                                const modalDelete = divdelete.querySelector(".modal")

                                document.body.appendChild(modalDelete)
                                const InstanciaBoostrapDoModal = new bootstrap.Modal(modalDelete)

                                InstanciaBoostrapDoModal.toggle()
                                document.body.removeChild(modalDelete)

                                const btnDelet = modalDelete.querySelector("#deletePontoId")
            
                                btnDelet.addEventListener("click", async () => {        
                          try {
                            const deletado = await axios.delete(`http://localhost:9000/api/linhas/bus-stop/${objEjs.id}`)

                            localStorage.setItem("stopBusDelete", JSON.stringify({
                              cor: "danger",
                              texto: deletado.data.message,
                              div: "#alert",
                            }))

                            location.reload()
                          } catch (error) {
                            console.error(error)
                          }

      })


 

  }





  function modalEdit(objEjs) {

    const div = document.createElement("div")


    div.innerHTML = `
          
        <div class="modal fade" id="modalToggle" aria-labelledby="modalToggleLabel" tabindex="-1" style="display: none" _mstvisible="0" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" _mstvisible="1">
            <div class="modal-content" _mstvisible="2">
              <form id="resetForm">
                <div class="modal-header" _mstvisible="3">
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar" _mstaria-label="59709" _msthash="308" _mstvisible="4"></button>
                </div>
                <div class="modal-body" _msttexthash="1992003" _msthash="309" _mstvisible="3">
                  <div class="row" _mstvisible="4">
                    <div class="card-body form-group">
                      <div class="row mb-4">
                        <label class="col-sm-2 col-form-label" for="cepInput">CEP</label>
                        <div class="col-sm-10">
                          <input type="text" class="form-control" name="cepInput" id="cepInput" placeholder="Enter CPF" value="${objEjs.cep}" required>

                        </div>
                      </div>

                      <div class="row mb-4">
                        <label class="col-sm-2 col-form-label" for="street">Rua</label>
                        <div class="col-sm-10">
                          <input type="text" name="street" id="street" class="form-control phone-mask" value="${objEjs.endereco.split(",")[0].trim()}" />
                        </div>
                      </div>

                      <div class="row mb-4">
                        <label class="col-sm-2 col-form-label" for="neighborhood">Bairro</label>
                        <div class="col-sm-10">
                          <input type="text" id="neighborhood" name="neighborhood" class="form-control phone-mask" value="${objEjs.endereco.split(",")[1].trim()}" />
                        </div>
                      </div>

                      <div class="row mb-4">
                        <label class="col-sm-2 col-form-label" for="city">Cidade</label>
                        <div class="col-sm-10">
                          <input type="text" id="city" class="form-control phone-mask" name="city" value="${objEjs.endereco.split(",")[2].trim()}" />
                        </div>
                      </div>

                      <div class="row mb-4">
                        <label class="col-sm-2 col-form-label" for="state">Estado</label>
                        <div class="col-sm-10">
                          <input type="text" id="state" class="form-control phone-mask" name="state" value="${objEjs.endereco.split(",")[3].trim()}" />
                        </div>
                      </div>

                    </div>
                  </div>
                </div>
                <div class="modal-footer" _mstvisible="3">
                  <button type="button" class="btn btn-warning" id="resetar" onclick="document.getElementById('resetForm').reset()">
                    Resetar
                  </button>

                  <button type="submit" class="btn btn-success">
                    Salvar alterações
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

          `

    const modal = div.querySelector(".modal")

    //selecionando o modoal  e adicionando o modal ao BODY do HTML
    document.body.appendChild(modal)

    const InstanciaBoostrapDoModal = new bootstrap.Modal(modal)

    InstanciaBoostrapDoModal.toggle()

    formsValidacaoEdit = new Inputs("#resetForm") // pega todos os inputs do form 
    const btnSalvarAlteracoes = document.querySelector("#btnSalvarAlteracoes")




    formsValidacaoEdit.allvalidacao({
      cepInput: {
        min: 9,
        max: 9,
        caractereNpermitido: ["Nletra", "Nacentuacao", ],
        autopontuar: [/([\d]{6})([\d]{2})/, "$1-$2"],
        pattern: ["(\\d{6}-\\d{2})", "cep valido", "cep invalido"],
        customEvento: [

          (async (value) => {
            try {
              informacoesdaAPI = (await axios.get(`https://brasilapi.com.br/api/cep/v2/${value}`)).data


              formsValidacaoEdit.inputs((input) => {
                for (const info in informacoesdaAPI) {
                  if (Object.hasOwnProperty.call(informacoesdaAPI, info)) {
                    if (input.name == info) {
                      input.value = informacoesdaAPI[info]
                      input.focus()
                      input.blur()

                    }
                  }
                }
              })

            } catch (error) {
              console.log(error)
              if (error.response.status == 404) return "insira um CEP que exista"

            }
          })
        ],
        btnoff: "apaiossk",

      },
      street: {
        min: 3,
        max: 255,
        btnoff: "apaiossk",
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [".*", "Rua valido", "Rua invalida"]
      },

      neighborhood: {
        min: 3,
        max: 255,
        btnoff: "apaiossk",
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [".*", "Bairro valido", "Bairro invalido"]
      },

      city: {
        min: 3,
        max: 255,
        btnoff: "apaiossk",
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [".*", "Cidade valida", "Cidade invalida"],
        // customEvento: [
        //   (value) => {

        //     if (objEjs.endereco.split(",")[2] !== value) {
        //       console.log("paia deu certo", objEjs)

        //     } else {
        //       console.log("paiaDeu Errado")

        //       return "deu erro"
        //     }
        //   }

        // ]
      },

      state: {
        min: 2,
        max: 2,
        btnoff: "apaiossk",
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [".*", "Estado valido", "Estado invalido"]
      },


    });




    formsValidacaoEdit.forms.addEventListener("submit", async (event) => {

      event.preventDefault()

      try {

        const valorEdit = formsValidacaoEdit.allValues()
        valorEdit.id = objEjs.id


        const {
          data
        } = await axios.get(`https://brasilapi.com.br/api/cep/v2/${valorEdit.cepInput}`)




        valorEdit.lat = data.location.coordinates.latitude
        valorEdit.lng = data.location.coordinates.longitude

        const response = await axios.put(`http://localhost:9000/api/linhas/bus-stop`, valorEdit)
        console.log(response)

        console.log(objEjs)
        localStorage.setItem("stopBusEdit", JSON.stringify({
          cor: "success",
          texto: `O ponto do cep ${objEjs.cep} foi alterado para o cep ${valorEdit.cepInput} com sucesso`,
          div: "#alert",
        }))

        location.reload()



      } catch (error) {
        console.log(error);
      }


    })






    modal.addEventListener("hidden.bs.modal", () => {

      // quando o modal for fechado esse evento acionara e excluira o modal do body
      document.body.removeChild(modal)
    })



  }
  // fim modalEdit




  // criando uma função que recebe a informação em um objeto transformado pelo JSON.stringify
  function modalInfo(objEjs) {




    // transformando o objeto que está transformado em string para objeto dnv



    // criando uma div no js
    const umadiv = document.createElement("div")

    // adicionando o innerHTML com um template
    // https://www.w3schools.com/js/js_string_templates.asp
    // e
    // adicionando uma div de modal pego do site do boostrap
    umadiv.innerHTML = `
          <div class="modal fade" tabindex="-1" >
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Detalhes do Ponto</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body list-group h-100 w-100">
                  <li class="list-group-item">CEP:<span class="ms-1"> ${objEjs.cep}</span></li>
                  <li class="list-group-item">Rua: <span class="ms-1"> ${objEjs.endereco.split(",")[0]}</span> </li>
                  <li class="list-group-item">Bairro: <span class="ms-1"> ${objEjs.endereco.split(",")[1]}</span></li>
                  <li class="list-group-item">Cidade: <span class="ms-1">${objEjs.endereco.split(",")[2]}</span> </li>
                  <li class="list-group-item">Estado:  <span class="ms-1">${objEjs.endereco.split(",")[3]}</span></li>
                </div >
                <div class="modal-footer justify-content-between">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>

                  <div>
                  <button type="button" class="btn btn-warning" onclick='modalEdit(${JSON.stringify(objEjs)})' data-bs-dismiss="modal">Editar</button>
                  <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Deletar</button>
                  </div>
                </div>
              </div >
            </div >
          </div >
          `


    // o split divide uma string em substrings
    // https://www.w3schools.com/jsref/jsref_split.asp


    // criando uma variavel que recebe o modal dentro do umadiv
    const modal = umadiv.querySelector(".modal")

    // adicionando o modal ao BODY do HTML
    document.body.appendChild(modal)


    // criando uma instancia seguindo as instruções do boostrap
    // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
    const InstanciaBoostrapDoModal = new bootstrap.Modal(modal)

    // abrindo o modal
    InstanciaBoostrapDoModal.toggle()



    // vai para a parte de eventos que encontrara mais informações
    // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
    modal.addEventListener("hidden.bs.modal", () => {

      // quando o modal for fechado esse evento acionara e excluira o modal do body
      document.body.removeChild(modal)
    })
    // fim da função
  }

  // veja a linha 117

  // //  chamando a função com ela recebendo as informações da primeira linha
  // modalPaia(<%-JSON.stringify(pontos[0])%>)
</script>