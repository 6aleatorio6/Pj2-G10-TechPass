<h4 class="fw-bold py-3 mb-2">
  <span class="text-muted fw-light">Linhas/</span> Atendentes
</h4>

<div id="alert"></div>
<script>
  alert("AtendenteCreate");
  alert("AtendenteEdit");
  alert("AtendenteDelete");
</script>

<%- include('../partials/_formsCriarAtendente.ejs') %>

<section class="mt-5">
  <h4 class="">Todos os pontos de onibus</h4>

  <div class="card">
    <div class="table-responsive text-nowrap">
      <table id="PontosDeOnibus" class="table table-striped" style="width: 100%">
        <thead>
          <tr>
            <th>username</th>
            <th>cpf</th>
            <th>turno</th>
            <th>Opções</th>
          </tr>
        </thead>
        <tbody>
          <% allAtendentes.forEach((elem)=> { %>

          <tr>
            <td><%= elem.superuser.username %></td>
            <td><%= elem.cpf %></td>
            <td><%= elem.turno %></td>
            <td>
              <% const info = {
              email: elem.email,
              username: elem.superuser.username,
              cpf: elem.cpf,
              endereco: elem.endereco,
              nascimento: new Date(elem.nascimento).toLocaleDateString(),
              turno: elem.turno,
              telefone: elem.telefone,
              "local de trabalho": elem.loja_recarga.nome,
              "endereco de onde trabalha": elem.loja_recarga.endereco,
              email: elem.email } %>
              <button type="button" class="btn btn-info py-1 px-2" onclick='modalInfo(<%-JSON.stringify(info)%>)'>
                <i class="bi bi-info-lg"></i>
              </button>

              <button class="btn btn-warning py-1 px-2" onclick='modalEdit(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-pencil-square"></i>
              </button>

              <button class="btn btn-danger py-1 px-2" onclick='modalDelet(<%-JSON.stringify(elem)%>)'>
                <i class="bi bi-trash-fill"></i>
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</section>

<!-- chamando o js do boostrap antes de criar a instancia -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script>
  function modalDelet(objEjs) {
    const divdelete = document.createElement("div");
    divdelete.innerHTML = `
          
              <div class="modal fade"  aria-labelledby="modalToggleLabel2" tabindex="-1" _mstvisible="0" style="display: none" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" _mstvisible="1">
                  <div class="modal-content" _mstvisible="2">
                    <div class="modal-header" _mstvisible="3">
                      <h5 class="modal-title text-warning" id="modalToggleLabel2" _msttexthash="66105" _msthash="311" _mstvisible="4">
                        Alerta!!!
                      </h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar" _mstaria-label="59709" _msthash="312" _mstvisible="4"></button>
                    </div>
                    <div class="modal-body" _msttexthash="1998048" _msthash="313" _mstvisible="3">
                      <span>
                        Tem certeza que desja excluir a atendente  ${objEjs.superuser.username}?</span>
                    </div>
                    <div class="modal-footer" _mstvisible="3">
                      <button class="btn btn-secondary" data-bs-dismiss="modal" _msttexthash="324714" _msthash="314" _mstvisible="4">
                        Cancelar
                      </button>
                      <button type="click" class="btn btn-danger" id="deletePontoId">
                        Sim, Deletar
                      </button>
  
            `;

    const modalDelete = divdelete.querySelector(".modal");

    document.body.appendChild(modalDelete);
    const InstanciaBoostrapDoModal = new bootstrap.Modal(modalDelete);

    InstanciaBoostrapDoModal.toggle();
    document.body.removeChild(modalDelete);

    const btnDelet = modalDelete.querySelector("#deletePontoId");

    btnDelet.addEventListener("click", async () => {
      try {
        const deletado = await axios.delete(
          `http://localhost:9000/api/userADM/atendente/${objEjs.id}`
        );

        localStorage.setItem(
          "AtendenteDelete",
          JSON.stringify({
            cor: "danger",
            texto: `a atendente ${objEjs.superuser.username} foi apagada`,
            div: "#alert",
          })
        );

        location.reload();
      } catch (error) {
        console.error(error);
      }
    });
  }

  function modalEdit(objEjs) {
    const div = document.createElement("div");

    div.innerHTML = `
    <!-- modal para criar um Atendente -->
<div class="modal fade modalForm" tabindex="-1" aria-labelledby="createAtendenteLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header border-bottom">
        <h4 class="modal-title d-flex w-100">
          Adicionando linha <span class="ms-auto">1/2</span>
        </h4>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form novalidate>
        <div class="modal-body">
          <div class="row g-2">
            <!-- nome real -->
            <div class="col-12">
              <label for="nome" class="form-label">Nome Completo</label>
              <input class="form-control" id="nome" name="nome" type="text" required />
            </div>

            <!-- username -->
            <div class="col-12 col-sm-8">
              <label for="username" class="form-label">Apelido (username)</label>
              <input name="username" id="username" class="form-control" type="text" value="${objEjs.superuser.username}" required />
            </div>
            <!-- nasc -->
            <div class="col-sm-4 col-12">
              <label for="nascimento" class="form-label">Data de Nascimento</label>
              <input name="nascimento" id="nascimento" class="form-control" type="date" required value="${new Date(objEjs.nascimento).toISOString()}" />
            </div>

            <!-- email -->
            <div class="col-12">
              <label for="email" class="form-label">Email</label>
              <input name="email" id="email" class="form-control" type="email" placeholder="digite seu email" required value="${objEjs.superuser.email}"/>
            </div>

            <!-- senha -->
            <div class="col-sm-5 col-12">
              <label for="senha" class="form-label">Insira uma senha</label>
              <input name="senha" id="senha" class="form-control" type="text"  placeholder="************" />
            </div>

            <!-- cpf -->
            <div class="col-sm-7 col-12">
              <label for="cpf" class="form-label">CPF</label>
              <input class="form-control" id="cpf" name="cpf" type="text" required value="${objEjs.cpf}" />
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary btnvoltar">
            Cancelar
          </button>
          <button type="submit" class="btn btn-primary">Avançar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- modal para criar um Atendente -->
<div class="modal fade modalForm" tabindex="-1" aria-labelledby="createAtendenteLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header border-bottom">
        <h4 class="modal-title d-flex w-100">
          Adicionando linha <span class="ms-auto">2/2</span>
        </h4>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form novalidate>
        <div class="modal-body">
          <div class="row g-2">
            <!-- nome real -->
            <div class="col-12">
              <label for="endereco" class="form-label">Endereço de sua casa</label>
              <input class="form-control" id="endereco" name="endereco" type="text" required value="${objEjs.endereco}" />
            </div>

            <!-- email -->
            <div class="col-12">
              <label for="telefone" class="form-label">Telefone</label>
              <input name="telefone" id="telefone" class="form-control" type="text" placeholder="digite seu telefone" required value="${objEjs.telefone}" />
            </div>

            <!-- username -->
            <div class="col-6">
              <label for="local_de_trabalho_id" class="form-label">local de trabalho</label>
              <select class="form-select" aria-label="Default select example" name="local_de_trabalho_id" id="local_de_trabalho_id">
                <option selected>selecione o local de trabalho</option>
              </select>
            </div>

            <!-- username -->
            <div class="col-6">
              <label for="turno" class="form-label">turno</label>
              <select class="form-select" aria-label="Default select example" name="turno" id="turno">
                <option selected>Selecione um turno</option>
                <option value="manha">manha</option>
                <option value="tarde">tarde</option>
                <option value="noite">noite</option>
              </select>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button " class="btn btn-secondary btnvoltar">
            voltar
          </button>
          <button type="submit" class="btn btn-primary">Criar ponto</button>
        </div>
      </form>
    </div>
  </div>
</div>
          `;

    document.body.appendChild(div);

    formEtapasForms(
      null,
      async (dataValues) => {
          try {
            const response = await axios.post(
              "http://localhost:9000/api/userADM/atendente",
              dataValues
            );
            localStorage.setItem(
              "AtendenteCreate",
              JSON.stringify({
                cor: "success",
                texto: `Atendente ${response.data.username} adicionada(o)`,
                div: "#alert",
              })
            );

            location.reload();
          } catch (error) {
            console.error(error);
          }
        },
        (formvalidacao) => {
         
          ;
          formvalidacao[0].inputs((input) => {

            
          });



          formvalidacao[0].allvalidacao({
            cpf: {
              max: 14,
              min: 14,
              caractereNpermitido: ["Nletra", "Nacentuacao"],
              pattern: [
                "(\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2,5})",
                // "\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}",
                "cpf valido",
                "cpf invalido",
              ],
              autopontuar: [
                /(\d{3})(\d{3})(\d{3})(\d{2})/,
                "$1.$2.$3-$4",
                /[.-]/g,
                "",
              ],
              customErro: [
                [
                  /(\d{3}\.\d{3}\.\d{3}-\d{3,6})/,
                  "não existe cpf com mais de 11 numeros",
                ],
              ],
              btnoff: "required",
            },
            nome: {
              max: 120,
              min: 3,
              caractereNpermitido: ["NcaractereEspecial", "Nnumber"],
              pattern: ["[a-zA-Z\\s]{3,120}", "nome valido", "nome invalido"],
              btnoff: "required",
            },
            username: {
              max: 90,
              min: 3,
              caractereNpermitido: ["NcaractereEspecial"],
              pattern: [
                "[a-zA-Z\\s_\\-\\d]{2,90}",
                "apelido valido",
                "apelido invalido",
              ],
              btnoff: "required",
            },
            email: {
              max: 64,
              pattern: [
                "^[a-zA-Z0-9\\._+\\-]+@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,6}$",
                "email valido",
                "email invalido",
              ],
              btnoff: "required",
            },
            nascimento: {
              max: "2024-12-31",
              min: "1900-01-01",
              pattern: ["", "nascimento valido", "nascimento invalido"],
              btnoff: "required",
            },

            senha: {
              max: 50,
              min: 8,
              caractereNpermitido: ["NcaractereEspecial", "Nacentuacao"],
              pattern: [
                "^[a-zA-Z0-9\\sáéíóúâêîôûàèìòùãõäëïöüçãõẽĩũâêîôûũṹỹḿẽĩỹẽẽỹẽỹã\´`~^]{8,50}$",
                "senha valida",
                "senha invalido",
              ],
              btnoff: "required",
            },
          });
        },
        div
    );
  }
  // fim modalEdit

  // criando uma função que recebe a informação em um objeto transformado pelo JSON.stringify
  function modalInfo(objEjs) {
    // transformando o objeto que está transformado em string para objeto dnv

    // criando uma div no js
    const umadiv = document.createElement("div");

    // adicionando o innerHTML com um template
    // https://www.w3schools.com/js/js_string_templates.asp
    // e
    // adicionando uma div de modal pego do site do boostrap
    umadiv.innerHTML = `
          <div class="modal fade" tabindex="-1" >
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Detalhes do Ponto</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body list-group h-100 w-100">
                  <ul class="list-group">
                  
                  </ul>
                </div >
                <div class="modal-footer justify-content-between">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>

                  <div>
                  <button type="button" class="btn btn-warning" onclick='' data-bs-dismiss="modal">Editar</button>
                  <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Deletar</button>
                  </div>
                </div>
              </div >
            </div >
          </div >
          `;

    for (const key in objEjs) {
      if (Object.hasOwnProperty.call(objEjs, key)) {
        const li = document.createElement("li");
        li.classList.add("list-group-item");
        li.innerText = `${key}: ${objEjs[key]}`;
        umadiv.querySelector("ul").appendChild(li);
      }
    }

    // o split divide uma string em substrings
    // https://www.w3schools.com/jsref/jsref_split.asp

    // criando uma variavel que recebe o modal dentro do umadiv
    const modal = umadiv.querySelector(".modal");

    // adicionando o modal ao BODY do HTML
    document.body.appendChild(modal);

    // criando uma instancia seguindo as instruções do boostrap
    // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
    const InstanciaBoostrapDoModal = new bootstrap.Modal(modal);

    // abrindo o modal
    InstanciaBoostrapDoModal.toggle();

    // vai para a parte de eventos que encontrara mais informações
    // https://getbootstrap.com/docs/5.3/components/modal/#how-it-works
    modal.addEventListener("hidden.bs.modal", () => {
      // quando o modal for fechado esse evento acionara e excluira o modal do body
      document.body.removeChild(modal);
    });
    // fim da função
  }

  // veja a linha 117

  // //  chamando a função com ela recebendo as informações da primeira linha
</script>