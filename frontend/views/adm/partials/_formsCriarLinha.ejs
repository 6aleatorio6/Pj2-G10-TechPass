<!-- botao -->
<button type="button" id="abrirCadastroDelinhas" class="btn btn-primary">
  Adicionar linha
</button>

<!-- modal para criar um ponto de onibus -->
<div class="modal fade modalForm" id="createLinhas1" tabindex="-1" aria-labelledby="createLinhas1Label" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <form novalidate>
        <div class="modal-header">
          <h4 class="modal-title" id="createLinhas1Label">Adicionando linha</h4>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body">
          <div class="row g-2">
            <div class="row ps-1">
              <div class="col-md-4 col-9">
                <label for="numero_linha" class="form-label">Numero da linha</label>
                <input type="text" class="form-control" id="numero_linha" name="numero_linha" required />
              </div>
            </div>
            <div class="col-md-6 col-12">
              <label for="bairroDestino" class="form-label">1° Bairro</label>
              <input type="text" class="form-control" id="bairroDestino" name="bairroDestino" required />
            </div>
            <div class="col-md-6 col-12">
              <label for="bairroOrigem" class="form-label">2° Bairro</label>
              <input type="text" class="form-control" id="bairroOrigem" name="bairroOrigem" required />
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" data-bs-dismiss="modal" class="btn btn-secondary btnvoltar">
            sair
          </button>
          <button type="submit" class="btn btn-primary">avançar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- modal para criar um ponto de onibus -->
<div class="modal-open modalForm" id="createLinhas2" tabindex="-1" aria-labelledby="createLinhas2Label" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content moldal-lg">
      <form novalidate>
        <div class="modal-header border-bottom">
          <h4 class="modal-title d-flex w-100">
            Adicionando linha <span class="ms-auto">2/3</span>
          </h4>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body">
          <div class="row row-cols-2 g-3">
            <div class="col-12 d-flex">
              <h5 class="mx-auto mt-3">Crie os Horarios de Saidas do Bairro</h5>
            </div>

            <div class="col-6">
              <h6>Saida de Olaria</h6>
              <ul class="list-group">
                <li class="list-group-item list-group-item-action">
                  A fourth item
                </li>
                <li class="list-group-item list-group-item-action">
                  <button class="btn p-0 m-0">Adicionar</button>
                </li>
              </ul>
            </div>

            <div class="col-6" id="lista1-horarios">
              <h6>Saida de Olaria</h6>

              <ul class="list-group">
                <li class="list-group-item p-0 m-0 d-flex add">
                  <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#addhorario2" aria-expanded="true" aria-controls="addhorario2">
                        adicionar um novo horario
                      </button>
                    </h2>
                    <div id="addhorario2" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                      <div class="accordion-body">
                        <!-- <div class="mx-auto d-flex" style="width: fit-content"> -->
                        <div class="row">
                          <div class="col-12">
                            <label class="m-0 mt-auto form-label  pe-3" for="addHora2">horas:
                            </label>

                            <div class="row">
                              <div class="col-8">
                                <input class="form-control py-1 px-2" style="width: fit-content" type="time" id="addHora2" name="addHora2" />
                              </div>
                              <div class="col-4">
                                <button class="btn py-1 px-2 ms-2 btn-success btnadd" type="button">
                                  <i class="bi bi-plus-lg"></i>
                                </button>
                              </div>
                            </div>
                          </div>

                          <div class="col-12">
                            <label class="m-0 mt-auto form-label pe-3" for="addduracao2">Duracao em minutos:
                            </label>
                            <input class="form-control py-1 px-2" type="number" id="addduracao2" name="addduracao2" />
                          </div>
                        </div>

                        <!-- </form> -->
                      </div>
                    </div>
                  </div>

                  <script></script>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary btnvoltar">
            Cancelar
          </button>
          <button type="submit" class="btn btn-primary">avançar</button>
        </div>
      </form>
    </div>
  </div>
</div>



<script>
  document.addEventListener("DOMContentLoaded", () => {
    function addhorario(lista = document) {
      divPaiLista = document.querySelector(`#${lista}`);
      lista = divPaiLista.querySelector("ul");
      const objHoras = [];

      function addLi(horas, duracao, indice) {
        const li = document.createElement("li");
        li.classList.add("list-group-item", "d-flex");
        li.innerHTML = `
        <p class="my-auto p-0 m-0">${horas} | Duracao: ${duracao}m</p>
        <div class="list-group ms-auto list-group-horizontal">
  
          <button type="button" class="excluir btn border ms-auto py-0 px-2">
            <i class="bi bi-x-lg text-danger"></i>
          </button>
        </div> 
        `;

        

        lista.insertBefore(li, lista.children[indice]);

        // <button class="subir  list-group-item list-group-item-action py-0 px-2"><i class="bi bi-arrow-up"></i></button>
        // <button class="descer  list-group-item list-group-item-action py-0 px-2"><i class="bi bi-arrow-down"></i></button>
      }

      lista.querySelectorAll("button").forEach((e) => {
        
        e.addEventListener("click", (evt) => {
          if (e.classList.contains("btnadd")) {
            let inputhoras = lista.querySelector("#addHora2"),
              inputduracao = lista.querySelector("#addduracao2");

            if (inputduracao.classList.contains("is-valid") && inputhoras.classList.contains("is-valid")) {

              const duracao = inputduracao.value,
                horas = inputhoras.value;

              const horarioSaida = {
                horas: new Date(`2000-01-01T${horas}`),
                duracao,
              };

              objHoras.push(horarioSaida);
              objHoras.sort((a, b) => {
                return b.horas - a.horas; // Isso ordenará as datas em ordem decrescente
              });

              for (const i in objHoras) {
                if (objHoras[i] === horarioSaida) {
                  setTimeout(() => {
                    addLi(horas, duracao, i);
                  }, 500);

                  break;
                }
              }

              inputhoras.value = "";
              inputduracao.value = "";

              inputhoras.classList.remove("is-valid")
              inputduracao.classList.remove("is-valid")

              const bsCollapse = new bootstrap.Collapse("#addhorario2")
              bsCollapse.hide()
            } else {
              evt.stopPropagation()
              inputhoras.focus()
              inputhoras.blur()
              inputduracao.focus()
              inputduracao.blur()
            }
          }

    
        });
      });
    }

    addhorario("lista1-horarios");




    // criando os modals e outras coisas
    const modalsBoostrap = [];
    const formvalidacao = [];
    let ultimoFechado;
    const dataValues = new Map();

    document.querySelectorAll(".modalForm").forEach((elem, indice) => {
      // definindo as instancias dos modals e jogando para um array
      const modalAtual = new bootstrap.Modal(elem);
      const formAtual = new Inputs(elem.querySelector("form"));
      modalsBoostrap.push(modalAtual);
      formvalidacao.push(formAtual);

      // definir o primeiro modal no indice
      if (indice == 0) {
        ultimoFechado = indice;
      }

      // voltar para o modal anterior ou apenas ocultar se for o primeiro modal
      const voltar = elem.querySelector(".btnvoltar");
      if (voltar) {
        voltar.addEventListener("click", () => {
          modalAtual.hide();

          if (indice > 0) {
            elem.addEventListener("hidden.bs.modal", (evt) => {
              modalsBoostrap[indice - 1].show();
            });
          }
        });
      }

      //avancar para a proxima ou enivar para o servidor se for o ultimo modal
      formAtual.forms.addEventListener("submit", (evt) => {
        evt.preventDefault();

        modalAtual.hide();

        elem.addEventListener("hidden.bs.modal", (evt) => {
          const data = formAtual.forms.getAttribute("data-bs-infoModal");
          if (data) {
            for (const chave in data) {
              if (objeto.hasOwnProperty(chave)) {
                dataValues.set(chave, data[chave]);
              }
            }
          } else {
            formAtual.inputs(({
              name,
              values
            }) => {
              dataValues.set(name, values);
            });
          }

          if (indice == document.querySelectorAll(".modalForm").length - 1) {
            // enviar para o servidor
          } else {
            // avancar de pagina
            modalsBoostrap[indice + 1].show();
          }
        });
      });
    });

    formvalidacao[0].allvalidacao({
      numero_linha: {
        min: 1,
        max: 4,
        caractereNpermitido: ["Nletra", "NcaractereEspecial", "Nacentuacao"],
        pattern: ["^(\\d{1,4})$", "numero valido", "numero invalido"],
        btnoff: "required",
      },
      bairroDestino: {
        min: 3,
        max: 20,
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [
          "(^[a-zA-ZÀ-ÿ0-9\\s'\\-]{3,20}$)",
          "bairro valido",
          "bairro invalido",
        ],
        btnoff: "required",
      },
      bairroOrigem: {
        min: 3,
        max: 20,
        caractereNpermitido: ["Nnumber", "NcaractereEspecial"],
        pattern: [
          "(^[a-zA-ZÀ-ÿ0-9\\s'\\-]{3,20}$)",
          "bairro valido",
          "bairro invalido",
        ],
        btnoff: "required",
      },
    });

    formvalidacao[1].allvalidacao({
      addHora2: {
        min: 5,
        max: 5,
        caractereNpermitido: ["Number", "caractereEspecial"],
        pattern: [
          /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, // Válido: Formato HH:mm
          "Hora válida",
          "Hora inválida",
        ],
      },
      addduracao2: {
        min: 1,
        max: 500,
        pattern: [".*", "duração valida", "duração invalida"],
      },
    });

    // evento click que abre o modal que foi fechado por ultimo ou o primeiro
    document
      .querySelector("#abrirCadastroDelinhas")
      .addEventListener("click", () => {
        modalsBoostrap[ultimoFechado].show();
      });
  });
</script>