<section class="container d-flex flex-column align-items-center " style="margin-top: 6rem; min-height: 600px;">

  <h3 class="text-center mb-5 gx-3">Confira as lojas ou os locais de recarga
    perto de você.</h3>

  <div class=" p-3 g-3 bg-light row rounded d-flex flex-column-reverse flex-lg-row w-100 ">
    <div class=" ps-lg-0 col-lg-4 col-12 h-100 ">

      <form class=" d-inline-flex w-100" id="pesquisaLoja">
        <input type="text" class="form-control rounded-end-0" placeholder="Digite um bairro" />
        <div class="btn btn-primary rounded-start-0">
          buscar
        </div>
      </form>

      <div class="" style="aspect-ratio: 65/90;">
        <ul class="list-group mt-3 overflow-auto w-100 h-100" id="lista-de-pontos"></ul>
      </div>

    </div>

    <div class=" pe-lg-0 col-lg-8 col-12 " style='color: #0095eb; '>

      <div id='divmapa' class=" border ratio ratio-4x3"></div>

    </div>
  </div>

</section>




<script>
  (g => {
    var h, a, k, p = "The Google Maps JavaScript API",
      c = "google",
      l = "importLibrary",
      q = "__ib__",
      m = document,
      b = window;
    b = b[c] || (b[c] = {});
    var d = b.maps || (b.maps = {}),
      r = new Set,
      e = new URLSearchParams,
      u = () => h || (h = new Promise(async (f, n) => {
        await (a = m.createElement("script"));
        e.set("libraries", [...r] + "");
        for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]);
        e.set("callback", c + ".maps." + q);
        a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
        d[q] = f;
        a.onerror = () => h = n(Error(p + " could not load."));
        a.nonce = m.querySelector("script[nonce]")?.nonce || "";
        m.head.append(a)
      }));
    d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n))
  })({
    key: "<%- process.env.KEY_MAPS %>",
    v: "beta",
  });

  //site em que peguei a função: https://pt.martech.zone/calculate-great-circle-distance/#:~:text=A%20maneira%20simples%20de%20calcular,%C3%A9%20conhecido%20como%20Dist%C3%A2ncia%20euclidiana.
  function getDistanceBetweenPoints(latitude1, longitude1, latitude2, longitude2, unit = 'miles') {
    let theta = longitude1 - longitude2;
    let distance = 60 * 1.1515 * (180 / Math.PI) * Math.acos(
      Math.sin(latitude1 * (Math.PI / 180)) * Math.sin(latitude2 * (Math.PI / 180)) +
      Math.cos(latitude1 * (Math.PI / 180)) * Math.cos(latitude2 * (Math.PI / 180)) * Math.cos(theta * (Math.PI / 180))
    );
    if (unit == 'miles') {
      return Math.round(distance, 2);
    } else if (unit == 'kilometers') {
      return Math.round(distance * 1.609344, 2);
    }
  }



  let map;
  async function initMap(pontos, divmapa, listapai) {

    const {
      Map
    } = await google.maps.importLibrary("maps");
    const {
      AdvancedMarkerView
    } = await google.maps.importLibrary("marker");

    listapai = document.getElementById(listapai)
    divmapa = document.getElementById(divmapa)


    map = new Map(divmapa, {
      zoom: 16,
      center: {
        lat: parseFloat(pontos[0].lat),
        lng: parseFloat(pontos[0].lng)
      },
      mapId: "DEMO_MAP_ID",
      mapTypeControl: false,
      streetViewControl: false,
      rotateControl: false,
      fullscreenControl: false
    });

    const infowindow = []
    pontos.map((umPonto, i) => {
      const rowlista = document.createElement("li")
      rowlista.classList.add("list-group-item", "list-group-item-action", "rounded-end-0")
      rowlista.setAttribute("style", "")
      // rowlista.setAttribute("href", "#divmapa")
      rowlista.innerHTML = `
        <a href="#divmapa" class="text-dark h-100" style="min-height: 100px">
        <h5 class="mb-1">${umPonto.nome}</h5>
        <p class="mb-1 fs-6">${umPonto.endereco}</p>
        <small>CEP: ${umPonto.cep}</small>
        </a>
        `
      listapai.appendChild(rowlista)



      if (i == 0) {
        rowlista.classList.add("active")
      }

      const makericon = document.createElement("img")
      makericon.src = ("images/map.png")
      makericon.style.width = "50px"
      makericon.style.height = "auto"
      const marker = new AdvancedMarkerView({
        map: map,
        position: {
          lat: parseFloat(umPonto.lat),
          lng: parseFloat(umPonto.lng)
        },
        content: makericon,
        collisionBehavior: "REQUIRED_AND_HIDES_OPTIONAL"

      });




      infowindow[i] = new google.maps.InfoWindow({
        content: `
                <div class="p-0 m-0 text-dark">
                    <h4 class=" p-0 m-0">Tech Pass</h4>
                    <p class=" p-0 m-0">ponto de recarga no ${umPonto.endereco.split(",")[2]}</p>
                </div>
            `,
        ariaLabel: "Tech Pass",
      });

      rowlista.addEventListener("click", () => {

        const distancia = getDistanceBetweenPoints(map.getCenter().lat(), map.getCenter().lng(), {
          lat: parseFloat(umPonto.lat),
          lng: parseFloat(umPonto.lng)
        }.lat, {
          lat: parseFloat(umPonto.lat),
          lng: parseFloat(umPonto.lng)
        }.lng, "kilometers")

        let zoom, transicaoS
        if (distancia > 9) {
          zoom = 12
          transicaoS = 800
        } else {
          zoom = 14
          transicaoS = 500
        }


        map.setZoom(zoom)
        window.setTimeout(() => {
          map.panTo({
            lat: parseFloat(umPonto.lat),
            lng: parseFloat(umPonto.lng)
          });
          map.setZoom(15)
        }, transicaoS);


        infowindow.map((elem) => {
          if (elem == infowindow[i]) {
            window.setTimeout(() => {
              elem.open({
                anchor: marker,
                map,
              });
            }, transicaoS + 200)
          } else {
            elem.close()
          }
        })


        for (li of [...listapai.querySelectorAll("li")]) {
          if (li == rowlista) {
            rowlista.classList.add("active")
          } else {
            li.classList.remove("active")
          }
        }
      })



    })


    const lista = [...document.querySelector("#lista-de-pontos").querySelectorAll("li")]
    const formsPesquisar = document.querySelector("#pesquisaLoja")
    const input = formsPesquisar.querySelector("input")

    formsPesquisar.addEventListener("input", (evt) => {
      evt.preventDefault()

      lista.map((elem) => {

        const bairro = elem.querySelector("p").textContent.split(",")[2].toLowerCase().trim().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "")
        const resultado = input.value.toLowerCase().trim().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "")
        console.log(bairro, resultado)
        if (!bairro.startsWith(resultado)) {
          elem.classList.add("d-none")
          console.log("--------------------")
        } else {
          elem.classList.remove("d-none")
        }
      })
    })


  }




  <%if(typeof data !=="undefined"){%>
    initMap(
        <%-data%>,
        divmapa = "divmapa",
        listapai = "lista-de-pontos"
    )
  <%}%>    
</script>